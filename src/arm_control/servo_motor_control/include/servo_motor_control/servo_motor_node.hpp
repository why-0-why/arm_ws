#ifndef SERVO_MOTOR_NODE_HPP_
#define SERVO_MOTOR_NODE_HPP_

#include "rclcpp/rclcpp.hpp"
#include "servo_motor_interface/srv/command_feedback.hpp"
#include "servo_motor_interface/msg/motor_status.hpp"
#include "can_tool/can_tool.hpp"

using CommandFeedback = servo_motor_interface::srv::CommandFeedback;
using MotorStatus = servo_motor_interface::msg::MotorStatus;

#define SDO_SEND_ID 0x600
#define SDO_RECV_ID 0x580
#define EMCY_ID 0x080

#define Heartbeat_ID 0x700

#define Motor_Speed_mode 0x01
#define Motor_Position_mode 0x02
#define Motor_Test_mode 0x03
#define Motor_Find0_mode 0x04

#define SET_MODE 0xf0
#define SAVE 0xf1
#define SET_SPEED 0xf2
#define SET_POS 0xf3
#define SET_TEST 0xf4
#define SET_ZERO 0xf5

#define READ_ID 0x200

uint8_t command[8] = {0x23, 0xff, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00};     // 定义测试命令
uint8_t save_command[] = {0x23, 0x10, 0x10, 0x01, 0x73, 0x61, 0x76, 0x65}; // 保存参数指令
uint8_t startcommand[][8] = {
    {0x2B, 0x40, 0x60, 0x00, 0x80, 0x00, 0x00, 0x00},
    {0x2B, 0x40, 0x60, 0x00, 0x06, 0x00, 0x00, 0x00},
    {0x2B, 0x40, 0x60, 0x00, 0x07, 0x00, 0x00, 0x00},
    {0x2B, 0x40, 0x60, 0x00, 0x0f, 0x00, 0x00, 0x00}};
uint8_t set_speed_command[] = {0x2F, 0x60, 0x60, 0x00, 0x03, 0x00, 0x00, 0x00};    // 设置速度模式命令
uint8_t set_position_command[] = {0x2F, 0x60, 0x60, 0x00, 0x01, 0x00, 0x00, 0x00}; // 设置位置模式命令
uint8_t set_test_command[] = {0x2F, 0x60, 0x60, 0x00, 0x03, 0x00, 0x00, 0x00};     // 设置测试模式命令
uint8_t set_find0_command[] = {0x2F, 0x60, 0x60, 0x00, 0x06, 0x00, 0x00, 0x00};    // 设定原点模式指令

/* 速度模式下指令 */
uint8_t motor_speed_command[] = {0x23, 0xFF, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00}; // 速度设定指令
uint8_t motor_stop_command[] = {0x23, 0xFF, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00};  // 停止指令
uint8_t motor_speed_read[] = {0x40, 0x0C, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00};    // 读取速度指令

/* 原点定位模式下指令 */
uint8_t motor_find0_block[] = {0x2F, 0x98, 0x60, 0x00, 0x1F, 0x00, 0x00, 0x00};     // 堵转原点定位指令
uint8_t motor_find0_righthere[] = {0x2F, 0x98, 0x60, 0x00, 0x23, 0x00, 0x00, 0x00}; // 设定当前位置为原点指令
uint8_t motor_find0_start[] = {0x2B, 0x40, 0x60, 0x00, 0x1F, 0x00, 0x00, 0x00};     // 开始定位指令
uint8_t motor_find0_set0[] = {0x2B, 0x40, 0x60, 0x00, 0x1F, 0x00, 0x00, 0x00};      // 堵转原点定位指令
uint8_t motor_find0_ifOK[] = {0x40, 0x41, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00};      // 读取电机是否到位指令
/* 位置模式下指令 */

uint8_t motor_position_read_relative[] = {0x40, 0x64, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00}; // 读取电机相对0点位置指令
uint8_t motor_position_read_real[] = {0x40, 0x63, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00};     // 读取电机位置指令
uint8_t motor_position_set_target[] = {0x23, 0x7A, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00};    // 设定目标位置指令(可定初始值)
uint8_t motor_position_start[] = {0x2B, 0x40, 0x60, 0x00, 0xbf, 0x00, 0x00, 0x00};         // 执行定位指令

/* 力矩参数修改指令*/
uint8_t motor_maxforce_read[] = {0x40, 0x03, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00};  // 最大力矩读取
uint8_t motor_maxforce_write[] = {0x2B, 0x03, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00}; // 位置模式指令

#endif // SERVO_MOTOR_NODE_HPP_